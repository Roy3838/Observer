Ob-server/certs

website/dist
website/build

website/src-tauri/target
website/src-tauri/Cargo.lock

website/node_modules
website/.pnp

app/node_modules
app/dist
app/.env

desktop/node_modules
desktop/public/assets/
desktop/.pnp

desktop/dist
desktop/build

desktop/src-tauri/target
desktop/src-tauri/Cargo.lock

observer_ollama/dist				
observer_ollama/observer_ollama.egg-info	
**/*.rs.bk

.pnp.js

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
/python/**/data/
/python/**/*.log
/python/**/activity_log.json

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.venv
env/
venv/

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea
.vscode
*.swp
*.swo
.DS_Store

# Cache directories
.cache
.pytest_cache/
.mypy_cache/
.coverage
coverage/
.eslintcache

# Misc
*.pem
.DS_Store
/node_modules
/.pnp
.pnp.js

# Production build
/dist
/build

# Tauri
/src-tauri/target
/src-tauri/Cargo.lock
**/*.rs.bk

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
/python/**/data/
/python/**/*.log
/python/**/activity_log.json

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.venv
env/
venv/

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.idea
.vscode
*.swp
*.swo
.DS_Store

# Cache directories
.cache
.pytest_cache/
.mypy_cache/
.coverage
coverage/
.eslintcache

# Misc
*.pem
.DS_Storeompiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyPI configuration file
.pypirc


.DS_Store
.DS_Store?
desktop/src-tauri/target/*
desktop/src-tauri/python/python-bundle
api/start_command.sh
api/keys.sh
api/*.db
api/logs/
api/certs/
api/auth.py
api/auth0_manager.py
api/payments.py
api/quota_manager.py
api/admin_auth.py
api/tools_router.py
