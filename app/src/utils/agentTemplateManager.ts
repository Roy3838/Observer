// src/utils/agentTemplateManager.ts

import { CompleteAgent } from './agent_database';

export type SimpleTool = 'notification' | 'memory' | 'sms' | 'email' | 'whatsapp' | 'start_clip' | 'mark_clip' | 'pushover' | 'discord' | 'telegram' | 'ask' | 'system_notify' | 'message' | 'overlay';

export interface ToolData {
  smsPhoneNumber?: string;
  emailAddress?: string;
  whatsappPhoneNumber?: string;
  pushoverUserKey?: string;
  discordWebhookUrl?: string;
  telegramChatId?: string;
}

const TOOL_CODE_SNIPPETS: Record<SimpleTool, (data: ToolData) => string> = {
  notification: () => `
// --- NOTIFICATION TOOL ---
// Sends the model's entire response as a desktop notification.
notify("Observer AI Agent", response);
`,
  memory: () => `
// --- MEMORY TOOL ---
// Appends the model's response to this agent's memory, with a timestamp.
const timestamp = time();
appendMemory(agentId, \`\\n[\${timestamp}] \${response}\`);
`,
  sms: (data: ToolData) => {
    const phoneNumber = data.smsPhoneNumber ? JSON.stringify(data.smsPhoneNumber) : '""';
    return `
// --- SMS TOOL ---
// Sends the model's response as an SMS to the specified number.
sendSms(${phoneNumber}, response);
`;
  },
  whatsapp: (data: ToolData) => {
    const phoneNumber = data.whatsappPhoneNumber ? JSON.stringify(data.whatsappPhoneNumber) : '""';
    return `
// --- WHATSAPP TOOL ---
// Sends a pre-approved WhatsApp notification. The content is static for now.
// IMPORTANT: The 'response' variable is currently ignored for anti-spam reasons.
sendWhatsapp(${phoneNumber}, response);
`;
  },
  email: (data: ToolData) => {
    const emailAddr = data.emailAddress ? JSON.stringify(data.emailAddress) : '""';
    return `
// --- EMAIL TOOL ---
// Sends the model's response as an email to the specified address.
sendEmail(${emailAddr}, response);
`;
  },
  pushover: (data: ToolData) => {
    const userKey = data.pushoverUserKey ? JSON.stringify(data.pushoverUserKey) : '""';
    return `
// --- PUSHOVER TOOL ---
// Sends the model's response as a Pushover notification.
sendPushover(${userKey}, response);
`;
  },
  discord: (data: ToolData) => {
    const webhookUrl = data.discordWebhookUrl ? JSON.stringify(data.discordWebhookUrl) : '""';
    return `
// --- DISCORD TOOL ---
// Sends the model's response to a Discord channel via a webhook.
sendDiscord(${webhookUrl}, response);
`;
  },
  telegram: (data: ToolData) => {
    const chatId = data.telegramChatId ? JSON.stringify(data.telegramChatId) : '""';
    return `
// --- TELEGRAM TOOL ---
// Sends the model's response to a Telegram chat.
sendTelegram(${chatId}, response);
`;
  },
  start_clip: () => `
// --- START RECORDING TOOL ---
// Starts a video recording. The recording will stop when the agent is stopped
// or if you manually add a stopClip() call to the code.
startClip();
`,
  mark_clip: () => `
// --- LABEL RECORDING TOOL ---
// Adds the model's response as a label to an active recording.
// Prompt your model to output just the desired label text.
markClip(response);
`,
  ask: () => `
// --- ASK USER TOOL ---
// Shows a dialog asking for user confirmation.
ask(response);
`,
  system_notify: () => `
// --- SYSTEM NOTIFICATION TOOL ---
// Shows a native system notification.
system_notify(response, "Observer AI");
`,
  message: () => `
// --- MESSAGE TOOL ---
// Shows a dialog message to the user.
message(response);
`,
  overlay: () => `
// --- OVERLAY TOOL ---
// Displays a message in the translucent overlay window.
overlay(response);
`,
};

interface SimpleConfig {
  agentData: Partial<CompleteAgent>;
  selectedTools: Map<SimpleTool, ToolData>;
  condition: {
    enabled: boolean;
    keyword: string;
  };
}

export function generateAgentFromSimpleConfig(
  config: SimpleConfig
): { agent: CompleteAgent; code: string } {
  
  const comments = [
    '// This code was auto-generated by the Simple Agent Creator.',
    '// You can edit it to add more complex logic.',
  ].join('\n');

  let toolCode = Array.from(config.selectedTools.entries())
    .map(([tool, data]) => TOOL_CODE_SNIPPETS[tool](data).trim())
    .join('\n\n');

  if (config.condition.enabled && config.condition.keyword) {
    const safeKeyword = JSON.stringify(config.condition.keyword.toLowerCase()).slice(1, -1);
    const indentedToolCode = `  ${toolCode.replace(/\n/g, '\n  ')}`;
    toolCode = `if (response.toLowerCase().includes('${safeKeyword}')) {\n${indentedToolCode}\n}`;
  }

  const finalCode = `${comments}\n\n${toolCode}`;

  const agent: CompleteAgent = {
    id: config.agentData.id || `agent_${Date.now()}`,
    name: config.agentData.name || 'My New Agent',
    description: config.agentData.description || 'An agent created with the Simple Creator.',
    model_name: config.agentData.model_name || '',
    system_prompt: config.agentData.system_prompt || '',
    loop_interval_seconds: config.agentData.loop_interval_seconds || 60,
  };

  return {
    agent,
    code: finalCode,
  };
}
